

import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.awt.print.Book;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.PrinterJob;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.print.DocFlavor;
import javax.print.DocPrintJob;
import javax.print.PrintService;
import javax.print.SimpleDoc;
import javax.swing.JOptionPane;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.printing.PDFPrintable;
import java.util.Date;
public class MainFrame extends javax.swing.JFrame {

    Connection con = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    String HostName = "https://snk.extremeits.biz/";
    Integer Prints;
    String bl_id = null;
    String bl_number = null;
    String rand_number = null; 
    String new_type = null;
    String continuePrint = "no";
    public void setClientCode(String user) {this.txt_client_code.setText(user);}
    public String getClientCode() {return this.txt_client_code.getText();}
    
    public void setAgentCode(String user) {this.txt_agent_code.setText(user);}
    public String getAgentCode() {return this.txt_agent_code.getText();}
    
    public void setUserName(String pass) {this.txt_username.setText(pass);}
    public String getUserName() {return this.txt_username.getText();}
  
    public void setFullName(String pass) {this.txt_fullname.setText(pass);}
    public String getFullName() {return this.txt_fullname.getText();}
    
    public void setImagePath(String pass) {this.img_path.setText(pass);}
    public String getImagePath() {return this.img_path.getText();}
    
    public MainFrame() {
        con = JConnection.ConnectorDB();
        initComponents();
        this.setLocationRelativeTo(null);
        txt_client_code.setVisible(false);
        txt_agent_code.setVisible(false);
        txt_username.setVisible(false);
        txt_fullname.setVisible(false);
        img_path.setVisible(false);
        setIcon();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txt_username = new javax.swing.JTextField();
        txt_fullname = new javax.swing.JTextField();
        txt_client_code = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        bl_no = new javax.swing.JTextField();
        fullname = new javax.swing.JLabel();
        print_bl = new javax.swing.JButton();
        img_path = new javax.swing.JLabel();
        img_logo = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        bl_type = new javax.swing.JComboBox<>();
        txt_agent_code = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        label_status = new javax.swing.JLabel();
        label_ready = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SNK - Extremeits.biz");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        txt_username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_usernameActionPerformed(evt);
            }
        });

        jLabel1.setText("Bill of Lading No.");

        fullname.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        print_bl.setText("Print this BL");
        print_bl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                print_blActionPerformed(evt);
            }
        });

        jButton1.setText("Get Status");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        bl_type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Original BL", "Non Negotiable BL", "Telex Release", "RFS BL", "SEA WAYBILL", "BL Surrendered" }));

        jLabel2.setText("BL Type");

        label_status.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        label_status.setForeground(new java.awt.Color(0, 0, 153));

        label_ready.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        label_ready.setForeground(new java.awt.Color(102, 153, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fullname, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(227, 227, 227)
                                .addComponent(img_path))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(87, 87, 87)
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(print_bl))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bl_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(bl_no, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txt_username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_fullname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_client_code, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_agent_code, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addComponent(label_ready)))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(label_status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(img_logo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(img_logo, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fullname, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_fullname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_client_code, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_agent_code, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(bl_no, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bl_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_status, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_ready)
                .addGap(3, 3, 3)
                .addComponent(img_path)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(print_bl))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_usernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_usernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_usernameActionPerformed

    
    private void print_blActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_print_blActionPerformed
        GetBL();
        PrintBL(rand_number);
    }//GEN-LAST:event_print_blActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
       fullname.setText("You have logged in as " + txt_fullname.getText());
       try{
            String path = getImagePath();
            URL url = new URL(path);
            BufferedImage image = ImageIO.read(url);
            Image scaled = image.getScaledInstance(300, 80, image.SCALE_SMOOTH);
            img_logo.setIcon(new javax.swing.ImageIcon(scaled)); // NOI18N
            img_logo.setSize(600,200);
       }catch(Exception e){
           JOptionPane.showMessageDialog(null, getImagePath() );
       }
    }//GEN-LAST:event_formWindowOpened

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       GetBL();
    }//GEN-LAST:event_jButton1ActionPerformed

    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
private void setIcon() {
          setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("home-icon.png")));
  
}

private void GetBL(){
     
        String bl_types = null;
        
        
        bl_types = String.valueOf(bl_type.getSelectedItem());
        if(bl_types.equals("Draft BL")){
            new_type = "draft";
        }else if(bl_types.equals("Original BL")){
            new_type = "original";
        }else if(bl_types.equals("Non Negotiable BL")){
            new_type = "non-negotiable";
        }else if(bl_types.equals("Telex Release")){
            new_type = "telex-release";
        }else if(bl_types.equals("RFS BL")){
            new_type = "bl_rfs";
        }else if(bl_types.equals("SEA WAYBILL")){
            new_type = "bl_seaway";
        }else if(bl_types.equals("BL Surrendered")){
            new_type = "bl_surrendered";
        }
        
        
        String Sql = "Select * from remote_bl where (bl_no=? or bl_id=?) AND agent_code=? AND deleted='0'";
          try{
            pst = con.prepareStatement(Sql);
            pst.setString(1, bl_no.getText());
            pst.setString(2, bl_no.getText());
            pst.setString(3, txt_agent_code.getText());
            rs = pst.executeQuery();
            if(rs.next()){                
                rand_number = rs.getString("bl_string");
                bl_id = rs.getString("bl_id");
                bl_number = rs.getString("bl_no");
                String Sql2 = "SELECT * FROM invoice WHERE bl_id=?";
                try{
                    pst = con.prepareStatement(Sql2);
                    pst.setString(1, bl_id);
                    rs = pst.executeQuery();
                    if(!rs.next()){
                        JOptionPane.showMessageDialog(null, "Unable to find any invoice for this Bill of Lading. Please submit a invoice before print the original BL.");
                        System.exit(0);
                    }
                }catch(Exception e){
                    
                }
                String Sql1 = "SELECT * FROM bill_of_lading WHERE status = 'Approved' AND ID=? AND deleted='0'";
                try{
                    pst = con.prepareStatement(Sql1);
                    pst.setString(1, bl_id);
                    rs = pst.executeQuery();
                    if(!rs.next()){
                        JOptionPane.showMessageDialog(null, "This BL is not approved yet. Contact your authorized agent");
                        label_status.setText("");
                        label_ready.setText("");
                        return;
                    }
                    Integer nos_bls = Integer.parseInt(rs.getString("nos_of_bls"));
                    Prints = Integer.parseInt(rs.getString("print"));
                    
                    if(nos_bls <= Prints){
                         JOptionPane.showMessageDialog(null,"You have exceeded maximum number of prints.");
                         continuePrint = "no";
                         label_status.setText("");
                         label_ready.setText("");
                         return;
                    }
                    
                    continuePrint = "yes";
                    label_status.setText("You have " + (nos_bls - Prints) + " BL prints available out of total "+nos_bls+" BLs" );
                    label_ready.setText("Ready to Print!");
                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Error in Connection");
                    label_status.setText("");
                    label_ready.setText("");
                    return;
                }
            }else{
                JOptionPane.showMessageDialog(null, "Invalid BL Number or it is not linked with your data");
                return;
            }}catch(Exception e){
                JOptionPane.showMessageDialog(null, "Error connecting to server. Please contact your system administrator");
                return;
            }
          
         
}
private void PrintBL(String bl_data){
    if(continuePrint == "no"){
        return;
    }
    int dialogButton = JOptionPane.YES_NO_OPTION;
    int dialogResult = JOptionPane.showConfirmDialog (null, "Make sure you have loaded papers and printer is ready to print.\nContinue print?","Print Confirmation",dialogButton);
    if(dialogResult == JOptionPane.NO_OPTION){
           return;
        }
         try {
             //JOptionPane.showMessageDialog(null, HostName);
         URL url = new URL(HostName + "bl/report/index.php");
         URLConnection con = url.openConnection();
         // activate the output
         con.setDoOutput(true);
         PrintStream ps = new PrintStream(con.getOutputStream());
         // send your parameters to your site
         DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
         DateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");
         Date date = new Date();
         
         ps.print("java=ok");
         ps.print("&bl_no="+bl_no.getText());
         ps.print("&bl_type="+new_type);
         ps.print("&printed_by="+txt_fullname.getText());
         ps.print("&created_date="+dateFormat.format(date));
         ps.print("&created_time="+timeFormat.format(date));
         ps.print("&agent_code="+txt_agent_code.getText());
         ps.print("&pic_id=Default");
         ps.print("&rand_number="+ rand_number);
                 
         // we have to get the input stream in order to actually send the request
         con.getInputStream();

         // close the print stream
         ps.close();
         //PrintBL(rand_number);
         } catch (MalformedURLException e) {
             e.printStackTrace();
             label_status.setText("");
             label_ready.setText("");
             return;
         } catch (IOException ex) { 
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            label_status.setText("");
            label_ready.setText("");
            return;
        }     
    
         
         
    
        PrinterJob job = PrinterJob.getPrinterJob();
        //PrintService printService = PrintServiceLookup.lookupDefaultPrintService();  
        PrintService printService = job.getPrintService();
        
        DocPrintJob printJob = printService.createPrintJob();
        PageFormat pageFormat = PrinterJob.getPrinterJob().defaultPage();
        double default_width = pageFormat.getWidth();
        double default_height = pageFormat.getHeight();
        Paper paper = pageFormat.getPaper();
        //paper.setImageableArea(0, 0, paper.getWidth(), paper.getHeight());
        paper.setImageableArea(0, 0, Double.MAX_VALUE, Double.MAX_VALUE);
        
        pageFormat.setOrientation(PageFormat.PORTRAIT);
        pageFormat.setPaper(paper);
        PageFormat fixed_page = job.validatePage(pageFormat);
        double fixed_width = fixed_page.getImageableWidth();
        double fixed_height = fixed_page.getImageableHeight();
        
        if(default_height == fixed_height && default_width == fixed_width) {
            JOptionPane.showMessageDialog(null, "This printer looks like a \"PDF or image printer\". Please change your default printer to a real printer.");
            //System.out.println("This looks like a \"image printer\"");
            System.exit(0);
        } else {
            JOptionPane.showMessageDialog(null, "This looks like a \"real printer\"");
            System.exit(0);
            
            //System.out.println("This looks like a \"real printer\"");
        }
        
    try{    
        URL printFile = new URL(HostName + "bl/report/data/" + bl_data);
        InputStream in = printFile.openStream();
        PDDocument pdDocument = PDDocument.load(in);
        PDFPrintable pdfPrintable = new PDFPrintable(pdDocument);
        
        paper.setImageableArea(0, 0, paper.getWidth(), paper.getHeight());
        pageFormat.setPaper(paper);
        
        Book book = new Book();
        book.append(pdfPrintable, pageFormat);
        SimpleDoc doc = new SimpleDoc(book, DocFlavor.SERVICE_FORMATTED.PAGEABLE, null);
        printJob.print(doc, null);
        
        Prints++;
        DateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date date1 = new Date();
        String Sql2 = "UPDATE bill_of_lading SET print=? WHERE ID=?";
         try{
            pst = con.prepareStatement(Sql2);
            pst.setInt(1, Prints);
            pst.setString(2, bl_id);
            pst.executeUpdate();
            }catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
            }
         String Sql3 = "INSERT INTO bl_remote_log (bl_id, bl_no, username, printed_date) VALUES(?,?,?,?)";
         try{
            pst = con.prepareStatement(Sql3);
            pst.setString(1, bl_id);
            pst.setString(2, bl_number);
            pst.setString(3, txt_username.getText());
            pst.setString(4, dateFormat1.format(date1));
            pst.execute();
            }catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
            }
         try {
                URL url = new URL(HostName + "bl/report/data/data.php");
                URLConnection con = url.openConnection();
                con.setDoOutput(true);
                PrintStream ps = new PrintStream(con.getOutputStream());
                ps.print("bl_string="+ rand_number);
                con.getInputStream();
                ps.close();
                } catch (MalformedURLException e) {
                    e.printStackTrace();
                    return;
                } catch (IOException ex) { 
                   Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                   return;
                } 
     }catch(Exception e){
         System.out.println(e);
         return;
     }   
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField bl_no;
    private javax.swing.JComboBox<String> bl_type;
    private javax.swing.JLabel fullname;
    private javax.swing.JLabel img_logo;
    private javax.swing.JLabel img_path;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel label_ready;
    private javax.swing.JLabel label_status;
    private javax.swing.JButton print_bl;
    private javax.swing.JTextField txt_agent_code;
    private javax.swing.JTextField txt_client_code;
    private javax.swing.JTextField txt_fullname;
    private javax.swing.JTextField txt_username;
    // End of variables declaration//GEN-END:variables
}
